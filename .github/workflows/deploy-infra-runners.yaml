name: Terraform Deploy

on:
  pull_request:
    types: [closed]
    branches:
      - dev
      - stage
      - main

jobs:
  deploy:
    if: github.event.pull_request.merged == true
    runs-on: self-hosted

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure Terraform Plugin Cache
        run: |
          mkdir -p ~/.terraform.d/plugin-cache
          echo 'plugin_cache_dir = "$HOME/.terraform.d/plugin-cache"' > ~/.terraform.d/terraform.rc

      - name: Cache Terraform Plugin Directory
        uses: actions/cache@v3
        with:
          path: ~/.terraform.d/plugin-cache
          key: terraform-plugin-${{ runner.os }}-${{ hashFiles('**/*.tf') }}
          restore-keys: |
            terraform-plugin-${{ runner.os }}-

      - name: Cache Terraform Working Directory
        uses: actions/cache@v3
        with:
          path: ./walkthrough/.terraform
          key: terraform-dir-${{ runner.os }}-${{ hashFiles('walkthrough/**/*.tf') }}
          restore-keys: |
            terraform-dir-${{ runner.os }}-

      - name: Debug Base Branch
        run: |
          echo "GITHUB_BASE_REF: $GITHUB_BASE_REF"
          echo "Pull Request Event: $EVENT_DATA"
        env:
          EVENT_DATA: ${{ toJson(github.event) }}

      - name: Set Environment Variable from Base Branch
        run: |
          if [[ -z "$GITHUB_BASE_REF" ]]; then
            echo "GITHUB_BASE_REF is empty. Make sure this workflow is triggered by a pull request."
            exit 1
          fi

          if [[ "$GITHUB_BASE_REF" == "dev" ]]; then
            echo "ENV=dev" >> $GITHUB_ENV
          elif [[ "$GITHUB_BASE_REF" == "stage" ]]; then
            echo "ENV=stage" >> $GITHUB_ENV
          elif [[ "$GITHUB_BASE_REF" == "main" ]]; then
            echo "ENV=prod" >> $GITHUB_ENV
          else
            echo "Unsupported base branch: $GITHUB_BASE_REF"
            exit 1
          fi

      - name: Run Terraform Init & Plan Based on ENV
        run: |
          case "${ENV}" in
            dev)
              echo "Running Terraform for development..."
              cd walkthrough
              ./run dev network init -var-file=../dev.tfvars
              ./run dev network plan -var-file=../dev.tfvars -out=../tfplan
              ;;
            stage)
              echo "Running Terraform for staging..."
              cd walkthrough
              ./run stage network init -var-file=../stage.tfvars
              ./run stage network plan -var-file=../stage.tfvars -out=../tfplan
              ;;
            prod)
              echo "Running Terraform for production..."
              cd walkthrough
              ./run pro network init -var-file=../pro.tfvars
              ./run pro network plan -var-file=../pro.tfvars -out=../tfplan
              ;;
            *)
              echo "Unknown environment: ${ENV}"
              exit 1
              ;;
          esac
        env:
          ENV: ${{ env.ENV }}
