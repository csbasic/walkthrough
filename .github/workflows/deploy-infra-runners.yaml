name: Terraform Deploy

on:
  pull_request:
    types: [closed]
    branches:
      - dev
      - stage
      - main

jobs:
  deploy:
    if: github.event.pull_request.merged == true
    runs-on: self-hosted

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
      TF_PLUGIN_CACHE_DIR: ${{ github.workspace }}/.terraform.d/plugin-cache

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # Download cached plugin cache artifact if exists
      - name: Download Terraform Plugin Cache
        uses: actions/download-artifact@v4
        with:
          name: terraform-plugin-cache
          path: ${{ env.TF_PLUGIN_CACHE_DIR }}
        continue-on-error: true # Continue if not found

      # Download cached modules cache artifact if exists
      - name: Download Terraform Modules Cache
        uses: actions/download-artifact@v4
        with:
          name: terraform-modules-cache
          path: .terraform/modules
        continue-on-error: true # Continue if not found

      - name: Create Plugin Cache Directory
        run: mkdir -p ${{ github.workspace }}/.terraform.d/plugin-cache

      - name: Set Github Branch & Terraform Infra
        run: |
          BASE_BRANCH="${{ github.event.pull_request.base.ref }}"
          INFRA_STATE=network

          echo "Detected base branch: $BASE_BRANCH"

          case "$BASE_BRANCH" in
            dev)
              echo "INFRA_ENV=dev" >> $GITHUB_ENV
              echo "VAR_FILE=../dev.tfvars" >> $GITHUB_ENV
              echo "ENV_OUT_FILE=../dev-tfplan" >> $GITHUB_ENV
              ;;
            stage)
              echo "INFRA_ENV=stage" >> $GITHUB_ENV
              echo "VAR_FILE=../stage.tfvars" >> $GITHUB_ENV
              echo "ENV_OUT_FILE=../stage-tfplan" >> $GITHUB_ENV
              ;;
            main)
              echo "INFRA_ENV=prod" >> $GITHUB_ENV
              echo "VAR_FILE=../prod.tfvars" >> $GITHUB_ENV
              echo "ENV_OUT_FILE=../prod-tfplan" >> $GITHUB_ENV
              ;;
            *)
              echo "Unsupported base branch: $BASE_BRANCH"
              exit 1
              ;;
          esac

          # Also export these
          echo "INFRA_STATE=$INFRA_STATE" >> $GITHUB_ENV

      - name: Initialize Terraform Config
        run: |
          echo "Initializing..."
          cd /home/github/actions-runner/_work/walkthrough/walkthrough
          ./run "$INFRA_ENV" "$INFRA_STATE" init -var-file="$VAR_FILE"

      - name: Plan Terraform Infra
        run: |
          echo "Planning..."
          ./run "$INFRA_ENV" "$INFRA_STATE" plan -var-file="$VAR_FILE" -out="$ENV_OUT_FILE"

      # - name: Apply Terraform Infra
      #   run: |
      #     echo "Setting up infra..."

      #     ./run "$INFRA_ENV" "$INFRA_STATE" apply "$ENV_OUT_FILE"

      # - name: Terraform Destroy & Apply
      #   run: |
      #     echo "Getting ready.."
      #     ./run "$INFRA_ENV" "$INFRA_STATE" plan -destroy -out="$ENV_OUT_FILE"
      #     ./run "$INFRA_ENV" "$INFRA_STATE" apply "$ENV_OUT_FILE"
