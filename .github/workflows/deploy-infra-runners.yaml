name: Terraform Deploy

on:
  pull_request:
    types: [closed]
    branches:
      - dev
      - stage
      - main

jobs:
  deploy:
    if: github.event.pull_request.merged == true
    runs-on: self-hosted

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Check Terraform version
        run: terraform version

      - name: Debug Base Branch
        run: |

          echo "GITHUB_BASE_REF: $GITHUB_BASE_REF"
          echo "Pull Request Event: $EVENT_DATA"
        env:
          EVENT_DATA: ${{ toJson(github.event) }}

      - name: Set Environment Based on Base Branch
        run: |
          BASE_BRANCH="${{ github.event.pull_request.base.ref }}"
          echo "Base branch is: $BASE_BRANCH"

          if [[ "$BASE_BRANCH" == "dev" ]]; then
            echo "ENV=dev" >> $GITHUB_ENV
          elif [[ "$BASE_BRANCH" == "stage" ]]; then
            echo "ENV=stage" >> $GITHUB_ENV
          elif [[ "$BASE_BRANCH" == "main" ]]; then
            echo "ENV=prod" >> $GITHUB_ENV
          else
            echo "Unsupported base branch: $BASE_BRANCH"
            exit 1
          fi

      - name: Run Environment-Specific Steps
        run: |
          if [[ "${ENV}" == "dev" ]]; then
            echo "Running development tasks..."
          elif [[ "${ENV}" == "stage" ]]; then
            echo "Running staging tasks..."
          elif [[ "${ENV}" == "prod" ]]; then
            echo "Running production tasks..."
          else
            echo "Unknown ENV: '${ENV}'"
            exit 1
          fi
        env:
          ENV: ${{ env.ENV }}

      # Check Terraform Cache On ENV Base
      - name: Cache Terraform provider plugins
        run: |
          case "${ENV}" in
            dev)
              echo "Caching for dev..."
              echo "TF_CACHE_DIR=/home/github/actions-runner/_work/walkthrough/walkthrough/.terraform" >> $GITHUB_ENV
              ;;
            stage)
              echo "Caching for stage..."
              echo "TF_CACHE_DIR=/home/github/actions-runner/_work/walkthrough/walkthrough/.terraform" >> $GITHUB_ENV
              ;;
            prod)
              echo "Caching for prod..."
              echo "TF_CACHE_DIR=/home/github/actions-runner/_work/walkthrough/walkthrough/.terraform" >> $GITHUB_ENV
              ;;
            *)
              echo "Unknown ENV: '${ENV}'"
              exit 1
              ;;
          esac
        env:
          ENV: ${{ env.ENV }}

      # Restore Cache
      - name: Restore Terraform provider cache
        uses: actions/cache@v3
        with:
          path: ${{ env.TF_CACHE_DIR }}
          key: terraform-${{ env.ENV }}-${{ runner.os }}-${{ hashFiles('**/*.tf') }}
          restore-keys: |
            terraform-${{ env.ENV }}-${{ runner.os }}-

      # Development Environment
      - name: Setup Terraform Infrastructure Based on ENV
        run: |
          case "${ENV}" in
            dev)
              echo "Setting up infrastructure for development..."
              cd /home/github/actions-runner/_work/walkthrough/walkthrough
              ./run dev network init -var-file=../dev.tfvars
              ./run dev network plan -var-file=../dev.tfvars -out=../tfplan
              ;;
            stage)
              echo "Setting up infrastructure for staging..."
              cd /home/github/actions-runner/_work/walkthrough/walkthrough
              ./run stage network init -var-file=../stage.tfvars
              ./run stage network plan -var-file=../stage.tfvars -out=../tfplan
              ;;
            prod)
              echo "Setting up infrastructure for production..."
              cd /home/github/actions-runner/_work/walkthrough/walkthrough
              ./run pro network init -var-file=../pro.tfvars
              ./run pro network plan -var-file=../pro.tfvars -out=../tfplan
              ;;
            *)
              echo "Unknown ENV: '${ENV}'"
              exit 1
              ;;
          esac
        env:
          ENV: ${{ env.ENV }}
