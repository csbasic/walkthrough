name: Terraform Deploy

on:
  pull_request:
    types: [closed]
    branches:
      - dev
      - stage
      - main

jobs:
  deploy:
    if: github.event.pull_request.merged == true
    runs-on: self-hosted

    strategy:
      matrix:
        env: [dev, staging, prod]

    defaults:
      run:
        working-directory: ${{ matrix.env }}

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
      ENV: ${{ matrix.env }}
      TARGET: ${{ matrix.target }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Cache Terraform Provider Plugins
        uses: actions/cache@v3
        with:
          path: ~/.terraform.d/plugin-cache
          key: terraform-plugin-${{ matrix.env }}-${{ matrix.target }}-${{ runner.os }}-${{ hashFiles('**/*.tf') }}
          restore-keys: |
            terraform-plugin-${{ matrix.env }}-${{ matrix.target }}-${{ runner.os }}-

      - name: Cache Terraform .terraform Directory
        uses: actions/cache@v3
        with:
          path: ./walkthrough/.terraform
          key: terraform-dir-${{ matrix.env }}-${{ matrix.target }}-${{ runner.os }}-${{ hashFiles('walkthrough/**/*.tf') }}
          restore-keys: |
            terraform-dir-${{ matrix.env }}-${{ matrix.target }}-${{ runner.os }}-

      - name: Echo Current Environment and Target
        run: echo "Deploying $TARGET to $ENV"

      - name: Verify Directory Exists
        run: |
          DIR_PATH="./${ENV}/${TARGET}"
          echo "Checking for directory: $DIR_PATH"
          if [ ! -d "$DIR_PATH" ]; then
            echo "Error: Directory $DIR_PATH does not exist."
            exit 1
          fi

      - name: Setup Terraform Infrastructure Based on ENV
        run: |
          echo "Running Terraform for $ENV -> $TARGET..."
          case "${ENV}" in
            dev)
              ./run dev ${TARGET} init -var-file=../dev.tfvars
              ./run dev ${TARGET} plan -var-file=../dev.tfvars -out=../tfplan
              ;;
            staging)
              ./run stage ${TARGET} init -var-file=../stage.tfvars
              ./run stage ${TARGET} plan -var-file=../stage.tfvars -out=../tfplan
              ;;
            prod)
              ./run pro ${TARGET} init -var-file=../pro.tfvars
              ./run pro ${TARGET} plan -var-file=../pro.tfvars -out=../tfplan
              ;;
            *)
              echo "Unknown ENV: $ENV"
              exit 1
              ;;
          esac
